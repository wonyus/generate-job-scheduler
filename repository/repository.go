package repository

import (
	"database/sql"

	"github.com/jackc/pgx/v5/pgtype"
)

type SchedulerValues struct {
	Days   [][]interface{} `json:"days"`
	Dates  [][]interface{} `json:"dates"`
	Months [][]interface{} `json:"months"`
	Times  [][]string      `json:"times"`
}

type Switch struct {
	ID              int64          `json:"id" db:"id"`
	ClientID        sql.NullInt64  `json:"client_id" db:"client_id"`
	MqttClientID    string         `json:"mqtt_client_id" db:"mqtt_client_id"`
	Uuid            string         `json:"uuid" db:"uuid"`
	Name            string         `json:"name" db:"name"`
	Status          bool           `json:"status" db:"status"`
	SchedulerActive bool           `json:"scheduler_active" db:"scheduler_active"`
	Scheduler       interface{}    `json:"scheduler" db:"scheduler"`
	CreatedDate     string         `json:"created_date" db:"created_date"`
	UpdatedDate     string         `json:"updated_date" db:"updated_date"`
	DeleteDate      sql.NullString `json:"deleted_date" db:"deleted_date"`
}

type Task struct {
	Id          string
	Command     string
	ScheduledAt pgtype.Timestamp
	PickedAt    pgtype.Timestamp
	StartedAt   pgtype.Timestamp
	CompletedAt pgtype.Timestamp
	FailedAt    pgtype.Timestamp
}

type Repository interface {
	GetSwitchConfig() ([]Switch, error)
	InsertTask(task Task) (string, error)
}

type SQLServerRepository struct {
	*sql.DB
}

func NewSQLRepository(db *sql.DB) SQLServerRepository {
	return SQLServerRepository{DB: db}

}

func (db SQLServerRepository) GetSwitchConfig() ([]Switch, error) {
	rows, err := db.Query("SELECT * FROM switchs WHERE deleted_date IS NULL AND scheduler_active = true")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var switches []Switch

	for rows.Next() {
		var body Switch
		err := rows.Scan(&body.ID, &body.ClientID, &body.MqttClientID, &body.Uuid, &body.Name, &body.Status, &body.SchedulerActive, &body.Scheduler, &body.CreatedDate, &body.UpdatedDate, &body.DeleteDate)
		if err != nil {
			return nil, err
		}

		switches = append(switches, body)
	}

	if err := rows.Err(); err != nil {
		return nil, err
	}
	return switches, nil
}

func (db SQLServerRepository) InsertTask(task Task) (string, error) {
	// SQL statement with RETURNING clause
	sqlStatement := "INSERT INTO tasks (command, scheduled_at) VALUES ($1, $2) RETURNING id"

	var insertedId string

	// Execute the query and scan the returned id into the insertedId variable
	err := db.QueryRow(sqlStatement, task.Command, task.ScheduledAt.Time).Scan(&insertedId)
	if err != nil {
		return "", err
	}

	// Return the autogenerated UUID
	return insertedId, nil
}
